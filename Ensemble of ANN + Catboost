import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from catboost import CatBoostRegressor
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.preprocessing import StandardScaler

# ðŸ”¹ Load dataset
data = pd.read_csv("/content/encoded_dataset.csv")  # Update with actual path

# ðŸ”¹ Define target column
target_column = "sale_price"

# ðŸ”¹ Separate features and target variable
X = data.drop(columns=[target_column])
y = data[target_column]

# ðŸ”¹ Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ðŸ”¹ Normalize numerical features for ANN
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ------------------ Model 1: CatBoost Regressor ------------------
catboost_model = CatBoostRegressor(verbose=0, random_seed=42)
catboost_model.fit(X_train, y_train)

# ðŸ”¹ Predict with CatBoost
catboost_preds = catboost_model.predict(X_test)

# ------------------ Model 2: Artificial Neural Network (ANN) ------------------
# ðŸ”¹ Build the ANN model
ann_model = Sequential([
    Dense(128, input_dim=X_train_scaled.shape[1], activation='relu'),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='linear')
])

# ðŸ”¹ Compile the ANN model
ann_model.compile(optimizer='adam', loss='mse', metrics=['mse'])

# ðŸ”¹ Train the ANN model
ann_model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, verbose=1)

# ðŸ”¹ Predict with ANN
ann_preds = ann_model.predict(X_test_scaled).flatten()  # Ensure it's a 1D array

# ------------------ Ensemble the Predictions ------------------
# ðŸ”¹ Average the predictions from both models
ensemble_preds = (catboost_preds + ann_preds) / 2

# ------------------ Evaluate the Ensemble Model ------------------
mse = mean_squared_error(y_test, ensemble_preds)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, ensemble_preds)
r2 = r2_score(y_test, ensemble_preds)

print(f"âœ… Ensemble MSE: {mse:.2f}")
print(f"âœ… Ensemble RMSE: {rmse:.2f}")
print(f"âœ… Ensemble MAE: {mae:.2f}")
print(f"âœ… Ensemble RÂ² Score: {r2:.2f}")

# ðŸ”¹ Example predictions
print("\nðŸ”¹ Sample Predictions:")
print("Actual:", y_test.values[:5])
print("Predicted:", ensemble_preds[:5])
