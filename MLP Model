# MLP
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Import TensorFlow for MLP
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# ------------------------- Load Dataset -------------------------
# Load dataset (ensure correct dataset path)
file_path = "/content/drive/MyDrive/used car/encoded_dataset (1).csv"
df = pd.read_csv(file_path)

# ------------------------- Define Target and Features -------------------------
# Define target column
target_column = "sale_price"  # Change this if your target column name is different

# Split features and target
X = df.drop(columns=[target_column])  # Features
y = df[target_column]  # Target variable (Car Price)

# ------------------------- Convert Data to Numeric and Handle NaNs -------------------------
# Convert all columns to numeric (handle non-numeric errors)
X = X.apply(pd.to_numeric, errors='coerce')

# Fill NaN values with column mean
X.fillna(X.mean(), inplace=True)

# ------------------------- Split Dataset (80% Training, 20% Testing) -------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# ------------------------- Normalize Features for MLP -------------------------
# Standardize features using StandardScaler
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ------------------------- Define MLP Model -------------------------
# Build the MLP model
mlp_model = Sequential([
    Dense(128, activation="relu", input_dim=X_train_scaled.shape[1]),  # Input layer + Hidden layer 1
    Dropout(0.3),  # Dropout to prevent overfitting
    Dense(64, activation="relu"),  # Hidden layer 2
    Dropout(0.3),
    Dense(1, activation="linear")  # Output layer for regression
])

# ------------------------- Compile the MLP Model -------------------------
# Compile the model with Adam optimizer and MSE loss
mlp_model.compile(optimizer="adam", loss="mse", metrics=["mae"])

# ------------------------- Train the Model -------------------------
# Fit the MLP model with training data
history = mlp_model.fit(
    X_train_scaled, y_train,
    epochs=100,
    batch_size=32,
    verbose=1,
    validation_data=(X_test_scaled, y_test)
)

# ------------------------- Predict with MLP -------------------------
# Make predictions on test data
mlp_preds = mlp_model.predict(X_test_scaled).flatten()

# ------------------------- Evaluate Model Performance -------------------------
# Calculate Evaluation Metrics
mse = mean_squared_error(y_test, mlp_preds)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, mlp_preds)
r2 = r2_score(y_test, mlp_preds)

# Print model performance metrics
print(f"\nâœ… MLP Model Performance:")
print(f"MSE: {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAE: {mae:.4f}")
print(f"R2 Score: {r2:.4f}")

# ------------------------- Sample Predictions -------------------------
# Show first 5 sample predictions
print("\nðŸŽ¯ Sample Predictions:")
print("Actual:", y_test.values[:5])
print("Predicted:", mlp_preds[:5])

# ------------------------- Plot Training and Validation Loss -------------------------
import matplotlib.pyplot as plt
plt.figure(figsize=(8, 5))
plt.plot(history.history['loss'], label='Training Loss', color='teal')
plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.xlabel('Epochs')
plt.ylabel('Loss (MSE)')
plt.title('Training and Validation Loss Curve')
plt.legend()
plt.show()

# ------------------------- Plot Actual vs Predicted Values -------------------------
# Plot actual vs predicted values for better visualization
plt.figure(figsize=(8, 5))
plt.scatter(y_test, mlp_preds, color='dodgerblue', label='Predicted vs Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')
plt.xlabel('Actual Sale Price')
plt.ylabel('Predicted Sale Price')
plt.title('Actual vs Predicted Sale Price')
plt.legend()
plt.show()
